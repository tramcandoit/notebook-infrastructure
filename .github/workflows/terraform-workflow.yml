name: Terraform Workflow

on:
  pull_request:
    branches:
      - master # Trigger when a PR is merged into the master branch

env:
  CONFIG_DIRECTORY: "."
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write 

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5
      
      # Step 3: Configure AWS credentials
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} --quite
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} --quite
          aws configure set default.region us-east-1 --quite

      # Step 4: Configure Terraform Backend
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      # Step 5: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.CONFIG_DIRECTORY }}

      # Step 5: Terraform Apply
      - name: Terraform Apply
        if: github.event.pull_request.merged == true # Only run if the PR was merged
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.CONFIG_DIRECTORY }}